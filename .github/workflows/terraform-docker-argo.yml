name: Full CI/CD Pipeline

on:
  push:
    branches:
      - dev

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: effulgencetech-dev
  SONAR_PROJECT_KEY: gnpc-terraform-infra-k8s-web-app
  SONAR_HOST_URL: https://sonarcloud.io/project/overview?id=dainmusty_gnpc-terraform-infra-k8s-web-app

jobs:
  security-scan:
    name: Run Security Scans (Trivy + OWASP + SonarQube)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trivy Scan for filesystem & Dockerfile
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          ignore-unfixed: true
          severity: CRITICAL,HIGH

      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@dev
        with:
          format: "HTML"
          failOnCVSS: 7

      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectKey: ${{ env.SONAR_PROJECT_KEY }}
          organization: my-org
          token: ${{ secrets.SONAR_TOKEN }}
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=my-org
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}

  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker image
        run: |
          docker build -t dainmusty/effulgencetech-nodejs-img:${{ github.sha }} .
          docker push dainmusty/effulgencetech-nodejs-img:${{ github.sha }}

  terraform:
    name: Deploy Infra with Terraform
    runs-on: ubuntu-latest
    needs: docker-build-push

    steps:
      - uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init & Apply
        working-directory: env/dev
        run: |
          terraform init -input=false
          terraform apply --auto-approve -target=aws_cloudformation_stack.eks_cluster_stack -input=false
          terraform apply --auto-approve

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Check ArgoCD Status
        run: |
          echo "Checking ArgoCD pods status..."
          kubectl get pods -n argocd
          echo "Waiting for ArgoCD server pod to be ready..."
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=120s

  deploy-k8s:
    name: ArgoCD Sync
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v4

      - name: Commit and push changes to trigger ArgoCD
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git commit --allow-empty -m "Trigger ArgoCD sync"
          git push origin dev
