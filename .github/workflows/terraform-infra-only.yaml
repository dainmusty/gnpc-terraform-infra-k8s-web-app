name: Full CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch: # Enables manual run (for apply)

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: effulgencetech-dev
  SONAR_PROJECT_KEY: dainmusty_gnpc-terraform-infra-k8s-web-app
  SONAR_ORGANIZATION: effulgencetech

# ======================
# 1️⃣ SECURITY SCANS
# ======================
jobs:
  security-scan:
    name: Run Security Scans (Trivy + OWASP + SonarCloud)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          ignore-unfixed: true
          severity: CRITICAL,HIGH

      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'effulgencetech'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Upload OWASP Dependency-Check Report
        uses: actions/upload-artifact@v4
        with:
          name: OWASP Depcheck Report
          path: reports

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - uses: actions/checkout@v4

      - name: Install SonarCloud Scanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q sonar-scanner.zip
          echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
            -Dsonar.organization=${SONAR_ORGANIZATION} \
            -Dsonar.branch.name=${GITHUB_REF_NAME} \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN

# ======================
# 2️⃣ TERRAFORM PLAN
# ======================
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [security-scan, sonarcloud]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: root-modules/env/dev
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: root-modules/env/dev
        run: terraform plan -no-color -out=tfplan.out | tee tfplan.txt

      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: root-modules/env/dev/tfplan.txt

# ======================
# 3️⃣ CREATE PULL REQUEST FOR PLAN REVIEW
# ======================
  create-pr:
    name: Create or Update Pull Request
    runs-on: ubuntu-latest
    needs: terraform-plan

    steps:
      - uses: actions/checkout@v4

      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ./

      - name: Create Pull Request with Plan Summary
        run: |
          echo "## Terraform Plan Summary" > pr_body.md
          echo '```' >> pr_body.md
          # Use head safely and suppress the harmless broken pipe error
          head -n 200 tfplan.txt >> pr_body.md || true
          echo '```' >> pr_body.md


      - name: Commit and Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_PAT }}
          commit-message: "Terraform plan results"
          title: "Terraform Plan Review"
          body-path: pr_body.md
          base: main
          branch: infra-plan-review


# ======================
# 4️⃣ MANUAL APPLY (AFTER MERGE)
# ======================
  terraform-apply:
    name: Manual Terraform Apply
    runs-on: ubuntu-latest
    needs: create-pr
    if: github.event_name == 'workflow_dispatch' # Only run manually

    steps:
      - uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: root-modules/env/dev
        run: terraform init -input=false

      - name: Terraform Apply (Manual Trigger)
        working-directory: root-modules/env/dev
        run: terraform apply -auto-approve

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Wait for ALB & Export DNS
        run: |
          echo "Waiting for ALB provisioning..."
          for i in {1..30}; do
            ALB_DNS=$(kubectl get ingress -A -o jsonpath='{.items[*].status.loadBalancer.ingress[0].hostname}')
            if [ -n "$ALB_DNS" ]; then
              echo "ALB DNS found: $ALB_DNS"
              echo "$ALB_DNS" > alb_info.txt
              break
            fi
            echo "Still waiting for ALB..."
            sleep 20
          done

      - name: Upload ALB DNS as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: alb-info
          path: alb_info.txt

# ======================
# 5️⃣ ARGOCD DEPLOYMENT (AFTER APPLY)
# ======================
  deploy-k8s:
    name: ArgoCD Sync
    runs-on: ubuntu-latest
    needs: terraform-apply  # ✅ fixed dependency name

    steps:
      - uses: actions/checkout@v4

      - name: Set up Git user
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com

      - name: Pull latest before pushing
        run: |
          git pull --rebase origin main

      - name: Push changes
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/dainmusty/gnpc-terraform-infra-k8s-web-app.git
          git push origin main
